name: Build
on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.project }} ${{ matrix.version }} @ ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    # TEMP: Early MEGA upload test. Set to 'false' or remove to restore normal build.
    env:
      EARLY_MEGA_TEST: 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-latest, windows-latest]
        project: [osci-render, sosci]
        version: [free, premium]
        exclude:
          - project: sosci
            version: free
    steps:
      - name: Fix up git URLs
        run: echo -e '[url "https://github.com/"]\n  insteadOf = "git@github.com:"' >> ~/.gitconfig
        shell: bash

      - uses: actions/checkout@v1
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: true

      - name: Set platform variables
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            echo "OS=linux" >> $GITHUB_ENV
            echo "OS_ARTIFACT=linux" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            echo "OS=mac" >> $GITHUB_ENV
            echo "OS_ARTIFACT=macos" >> $GITHUB_ENV
          else
            echo "OS=win" >> $GITHUB_ENV
            echo "OS_ARTIFACT=windows" >> $GITHUB_ENV
          fi

      # ================= TEMP EARLY MEGA TEST SECTION (can be removed later) =================
      - name: Create dummy bin artifacts (TEMP)
        if: env.EARLY_MEGA_TEST == 'true'
        shell: bash
        run: |
          mkdir -p bin
          echo "Dummy build artifact for ${{ matrix.project }} ${{ matrix.version }} ${{ env.OS_ARTIFACT }}" > bin/${{ matrix.project }}-${{ matrix.version }}-${{ env.OS_ARTIFACT }}.txt
          echo "Timestamp: $(date -u)" > bin/BUILD_INFO.txt
          echo "ID=${{ matrix.project }}-${{ matrix.version }}-${{ env.OS_ARTIFACT }}" >> bin/BUILD_INFO.txt

      - name: Prepare MEGA upload path (TEMP)
        if: env.EARLY_MEGA_TEST == 'true'
        id: mega_path_early
        shell: bash
        run: |
          # Extract version attribute from the project's .jucer XML file
          JUCER_FILE="${{ matrix.project }}.jucer"
          if [[ ! -f "$JUCER_FILE" ]]; then
            echo "::error::Missing Jucer file $JUCER_FILE" >&2
            exit 1
          fi
          # Use dedicated Python helper script for consistent extraction
          if ! command -v python3 >/dev/null 2>&1; then
            echo "::error::python3 not found on runner" >&2
            exit 1
          fi
          chmod +x ci/extract_version.py || true
          PROJECT_VERSION=$(python3 ci/extract_version.py "$JUCER_FILE" || true)
          if [[ -z "$PROJECT_VERSION" ]]; then
            echo "::group::DEBUG JUCER FILE SNIPPET"; head -n15 "$JUCER_FILE"; echo "::endgroup::"
            echo "::error::Could not parse version from $JUCER_FILE via python" >&2
            exit 1
          fi
          # Final desired path: /<project>/<version> (e.g. /osci-render/2.6.1.0)
          FULL_PATH="/${{ matrix.project }}/$PROJECT_VERSION"
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_OUTPUT
          echo "FULL_PATH=$FULL_PATH" >> $GITHUB_OUTPUT
          echo "Early test upload path (no timestamp): $FULL_PATH"

      # Linux: install MEGAcmd via apt
      - name: Install MEGAcmd (Linux TEMP)
        if: env.EARLY_MEGA_TEST == 'true' && runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          # Install MEGAcmd via direct .deb download (requested method)
          wget https://mega.nz/linux/repo/xUbuntu_24.04/amd64/megacmd-xUbuntu_24.04_amd64.deb
          sudo apt-get update -y
          sudo apt install -y "$PWD/megacmd-xUbuntu_24.04_amd64.deb" || { echo "::error::Failed to install megacmd"; exit 1; }
          mega-version || true

      - name: Upload dummy binaries to MEGA (Linux TEMP)
        if: env.EARLY_MEGA_TEST == 'true' && runner.os == 'Linux'
        shell: bash
        env:
          MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
          MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
        run: |
          set -euo pipefail
          mega-login "$MEGA_USERNAME" "$MEGA_PASSWORD"
          mega-put -c bin/* "${{ steps.mega_path_early.outputs.FULL_PATH }}/" || mega-put -c bin "${{ steps.mega_path_early.outputs.FULL_PATH }}/"
          mega-logout --keep-session || true

      # macOS: install MEGAcmd via Homebrew cask and upload directly
      - name: Install MEGAcmd (macOS TEMP)
        if: env.EARLY_MEGA_TEST == 'true' && runner.os == 'macOS'
        shell: bash
        run: |
          brew update --preinstall >/dev/null 2>&1 || true
          brew install --cask megacmd
          echo "/Applications/MEGAcmd.app/Contents/MacOS" >> $GITHUB_PATH
          ls /Applications/MEGAcmd.app/Contents/MacOS || true
          mega-version || echo "megacmd version command not available yet"

      - name: Upload dummy binaries to MEGA (macOS TEMP)
        if: env.EARLY_MEGA_TEST == 'true' && runner.os == 'macOS'
        shell: bash
        env:
          MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
          MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
        run: |
          set -euo pipefail
          mega-login "$MEGA_USERNAME" "$MEGA_PASSWORD"
          mega-put -c bin/* "${{ steps.mega_path_early.outputs.FULL_PATH }}/" || mega-put -c bin "${{ steps.mega_path_early.outputs.FULL_PATH }}/"
          mega-logout --keep-session || true

      # Windows: install MEGAcmd via Chocolatey and upload directly
      - name: Install MEGAcmd (Windows TEMP)
        if: env.EARLY_MEGA_TEST == 'true' && runner.os == 'Windows'
        shell: powershell
        run: |
          choco install megacmd -y --no-progress
          echo "$env:LOCALAPPDATA\MEGAcmd" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          try { Get-ChildItem "$env:LOCALAPPDATA\MEGAcmd" | Select-Object -First 10 | Format-List } catch { Write-Host "Listing failed: $($_.Exception.Message)" }
          if (Get-Command mega-version -ErrorAction SilentlyContinue) { mega-version } else { Write-Host "megacmd version command not available yet" }

      - name: Upload dummy binaries to MEGA (Windows TEMP)
        if: env.EARLY_MEGA_TEST == 'true' && runner.os == 'Windows'
        shell: powershell
        env:
          MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
          MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
        run: |
          $ErrorActionPreference = 'Stop'
          # Trim potential CR/LF or whitespace from secrets (sometimes happens with copy/paste when setting secrets)
          $u = ($env:MEGA_USERNAME | ForEach-Object { $_.Trim() })
          $p = ($env:MEGA_PASSWORD | ForEach-Object { $_.Trim() })
          if (-not $u -or -not $p) { Write-Error "MEGA credentials empty after trim" }
          Write-Host "Attempting mega-login for user length: $($u.Length)"
          # Use --auth-code style not available; rely on standard login but detect failure via exit code & output
          $loginOutput = mega-login "$u" "$p" 2>&1
          if ($LASTEXITCODE -ne 0 -or ($loginOutput -match 'Login failed')) {
            Write-Host "mega-login output (masked):" ($loginOutput -replace [Regex]::Escape($u), '***')
            Write-Error "mega-login failed"
          }
          else {
            Write-Host "mega-login succeeded"
          }
          # Upload individual files (mega-put -c will create path if needed)
          Get-ChildItem bin | ForEach-Object {
            Write-Host "Uploading $_";
            mega-put -c $_.FullName "${{ steps.mega_path_early.outputs.FULL_PATH }}/" | ForEach-Object { $_ }
            if ($LASTEXITCODE -ne 0) { Write-Error "Upload failed for $($_.FullName)" }
          }
          $logoutOutput = mega-logout --keep-session 2>&1
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "mega-logout returned non-zero: $logoutOutput"
          } else {
            Write-Host "mega-logout succeeded"
          }

      - name: Early exit notice (TEMP)
        if: env.EARLY_MEGA_TEST == 'true'
        shell: bash
        run: |
          echo "::notice::EARLY_MEGA_TEST enabled - skipping full build & packaging steps." 
          # Skip remaining steps by setting a flag (conditions below check for != true)

      # ================= END TEMP EARLY MEGA TEST SECTION =================

      # macOS specific: setup Xcode and import certificates (skipped in EARLY_MEGA_TEST)
      - uses: maxim-lobanov/setup-xcode@v1
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        with:
          xcode-version: latest

      - name: Import application certificates
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        uses: apple-actions/import-codesign-certs@v3
        with:
          keychain: oscirender
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          p12-file-base64: ${{ secrets.APPLE_APPLICATION_CERTIFICATE }}
          p12-password: ${{ secrets.APPLE_APPLICATION_CERTIFICATE_PASSWORD }}

      - name: Import installer certificates
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        uses: apple-actions/import-codesign-certs@v3
        with:
          keychain: oscirender
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          p12-file-base64: ${{ secrets.APPLE_INSTALLER_CERTIFICATE }}
          p12-password: ${{ secrets.APPLE_INSTALLER_CERTIFICATE_PASSWORD }}
          create-keychain: false

      # Windows specific: NuGet setup
      - name: Setup NuGet.exe for use with actions
        if: matrix.os == 'windows-latest' && env.EARLY_MEGA_TEST != 'true'
        uses: NuGet/setup-nuget@v1.0.5

      - name: NuGet Sources
        if: matrix.os == 'windows-latest' && env.EARLY_MEGA_TEST != 'true'
        run: nuget sources

      - name: Run build & tests
        if: env.EARLY_MEGA_TEST != 'true'
        shell: bash
        run: |
          source ./ci/setup-env.sh
          source ./ci/test.sh
          source ./ci/build.sh "${{ matrix.project }}" "${{ matrix.version }}"

      # macOS packaging & notarization
      - name: Download Packages installer build tool
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        run: wget http://s.sudre.free.fr/files/Packages_1211_dev.dmg

      - name: Mount Packages image
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        run: hdiutil attach Packages_1211_dev.dmg

      - name: Install Packages
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        run: sudo installer -pkg /Volumes/Packages\ 1.2.11/Install\ Packages.pkg -target /

      - name: Build installer (macOS pkg)
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        run: packagesbuild --project "packaging/${{ matrix.project }}.pkgproj"

      - name: Sign installer (macOS pkg)
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        run: |
          productsign -s "${{ secrets.APPLE_DEVELOPER_ID_INSTALLER }}" "packaging/build/${{ matrix.project }}.pkg" "bin/${{ matrix.project }}-${{ matrix.version }}.pkg"
          pkgutil --check-signature "bin/${{ matrix.project }}-${{ matrix.version }}.pkg"

      - name: Notarize installer (macOS)
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        uses: lando/notarize-action@v2
        with:
          product-path: "bin/${{ matrix.project }}-${{ matrix.version }}.pkg"
          appstore-connect-username: ${{ secrets.APPLE_ID }}
          appstore-connect-password: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
          appstore-connect-team-id: ${{ secrets.APPLE_TEAM_ID }}
          primary-bundle-id: com.${{ matrix.project }}.pkg
          tool: notarytool
          verbose: true

      - name: Staple installer (macOS)
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        run: xcrun stapler staple "bin/${{ matrix.project }}-${{ matrix.version }}.pkg"

      - name: Check installer (macOS)
        if: matrix.os == 'macos-latest' && env.EARLY_MEGA_TEST != 'true'
        run: spctl -a -vvv -t install "bin/${{ matrix.project }}-${{ matrix.version }}.pkg"

      # Windows packaging (Inno Setup)
      - name: Compile .ISS to .EXE Installer
        if: matrix.os == 'windows-latest' && env.EARLY_MEGA_TEST != 'true'
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: "packaging/${{ matrix.project }}.iss"

      - name: Move installer to bin (Windows)
        if: matrix.os == 'windows-latest' && env.EARLY_MEGA_TEST != 'true'
        shell: bash
        run: mv "packaging/build/${{ matrix.project }}.exe" "bin/${{ matrix.project }}-${{ matrix.version }}.exe"
      # (Final MEGA upload happens earlier in EARLY_MEGA_TEST)
